AWSTemplateFormatVersion: 2010-09-09
Description: 'VPC: public and private subnets in two availability zones'
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: VPC Parameters
        Parameters:
          - ClassB
          - PublicIP
          - PrivateIP

Parameters:
  ClassB:
    Type: String
    Default: '10.0'
    Description: Class B Subnet for the environment
    AllowedValues:
      - '10.0'
      - '10.1'
      - '10.2'
      - '10.3'
    ConstraintDescription: Must be a valid IP address or CIDR range from the allowed list.

  InstanceSize:
    Description: Instance Type
    Type: String
    Default: Free.Tier-t2.micro
    AllowedValues:
      - Free.Tier-t2.micro
      - Standard.Tier-t3.micro

Mappings:
  AWSInstanceType:
    Free.Tier-t2.micro:
      InstanceType: t2.micro
    Standard.Tier-t3.micro:
      InstanceType: t3.micro

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Sub ${ClassB}.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: Espira-VPC

  MyNATInstance:
     Type: 'AWS::EC2::Instance'
     Properties:
         ImageId: ami-052551c6a7f47b714
         KeyName: testkeypair
         SourceDestCheck: false
         Tags:
           - Key: Name
             Value: NAT-Instance
         InstanceType:
           Fn::FindInMap:
           - AWSInstanceType
           - Ref: InstanceSize
           - InstanceType
         BlockDeviceMappings:
           - DeviceName: /dev/sdm
             Ebs:
              VolumeType: io1
              Iops: 200
              DeleteOnTermination: true
              VolumeSize: 20
         SubnetId: !Ref PublicSubnet00
         SecurityGroupIds: 
                - !Ref NATSecurityGroup
                - !Ref SSHSecurityGroup 
         VpcId: !Ref VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: EspiraIGW

  EgressOnlyInternetGateway:
    Type: AWS::EC2::EgressOnlyInternetGateway
    Properties:
      VpcId: !Ref VPC

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet00:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      CidrBlock: !Sub ${ClassB}.0.0/24
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: publicsubnet00
        - Key: Reach
          Value: public

  PublicSubnet01:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      CidrBlock: !Sub ${ClassB}.1.0/24
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: publicsubnet01
        - Key: Reach
          Value: public

  PrivateSubnet00:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      CidrBlock: !Sub ${ClassB}.10.0/24
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: privatesubnet00
        - Key: Reach
          Value: private

  PrivateSubnet01:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      CidrBlock: !Sub ${ClassB}.11.0/24
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: privatesubnet01
        - Key: Reach
          Value: private

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public Route

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private Route

  RouteTableAssociationAPublic00:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet00
      RouteTableId: !Ref PublicRouteTable

  RouteTableAssociationAPublic01:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet01
      RouteTableId: !Ref PublicRouteTable

  RouteTableAssociationAPrivate00:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet00
      RouteTableId: !Ref PrivateRouteTable

  RouteTableAssociationAPrivate01:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet01
      RouteTableId: !Ref PrivateRouteTable

  RouteTablePublicInternetRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  RouteTablePublicAInternetRouteIPv6:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationIpv6CidrBlock: '::/0'
      GatewayId: !Ref InternetGateway

  RouteTablePrivateAInternetRouteIPv6:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationIpv6CidrBlock: '::/0'
      EgressOnlyInternetGatewayId: !Ref EgressOnlyInternetGateway

  NetworkAclPublic:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PublicAcl

  NetworkAclPrivate:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PrivateAcl

  SubnetNetworkAclAssociationAPublic00:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet00
      NetworkAclId: !Ref NetworkAclPublic

  SubnetNetworkAclAssociationAPublic01:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet01
      NetworkAclId: !Ref NetworkAclPublic

  SubnetNetworkAclAssociationAPrivate00:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet00
      NetworkAclId: !Ref NetworkAclPrivate

  SubnetNetworkAclAssociationAPrivate01:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet01
      NetworkAclId: !Ref NetworkAclPrivate

  NetworkAclEntryInPublicAllowAll:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0

  NetworkAclEntryInPublicAllowAllIPv6:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 98
      Protocol: -1
      RuleAction: allow
      Egress: false
      Ipv6CidrBlock: '::/0'

  NetworkAclEntryOutPublicAllowAll:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0

  NetworkAclEntryOutPublicAllowAllIPv6:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 98
      Protocol: -1
      RuleAction: allow
      Egress: true
      Ipv6CidrBlock: '::/0'

  NetworkAclEntryInPrivateAllowAll:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkAclPrivate
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0

  NetworkAclEntryInPrivateAllowAllIPv6:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkAclPrivate
      RuleNumber: 98
      Protocol: -1
      RuleAction: allow
      Egress: false
      Ipv6CidrBlock: '::/0'

  NetworkAclEntryOutPrivateAllowAll:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkAclPrivate
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0

  NetworkAclEntryOutPrivateAllowAllIPv6:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkAclPrivate
      RuleNumber: 98
      Protocol: -1
      RuleAction: allow
      Egress: true
      Ipv6CidrBlock: '::/0'

  SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: HTTP/HTTPS and SSH connection from Public Internet
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: 8
          ToPort: -1
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  NATSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: SSH connection within local VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Sub ${ClassB}.0.0/16
        - IpProtocol: icmp
          FromPort: 8
          ToPort: -1
          CidrIp: !Sub ${ClassB}.0.0/16


  InternalSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: SSH access internally
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Sub ${ClassB}.10.0/16
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Sub ${ClassB}.11.0/16


Outputs:
  PublicSubnet00: 
    Description: Public subnet00 ID for NAT Instance
    Value: !Ref PublicSubnet00
    Export: 
     Name: !Sub '${AWS::StackName}-PublicSubnet00'
     
  PublicSubnet01: 
    Description: Public subnet01 ID for public instance
    Value: !Ref PublicSubnet01
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnet01'

  VPC: 
    Description: VPC Id 
    Value: !Ref VPC
    Export:
      Name: !Sub '${AWS::StackName}-VPC'

  PrivateSubnet00:
    Description: Private subnet00 ID for private instance
    Value: !Ref PrivateSubnet00
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnet00'

  PrivateSubnet01:
    Description: Private subnet01 ID for another private instance
    Value: !Ref PrivateSubnet01
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnet01'
  SSHSecurityGroup: 
    Description: Public Ingress Rules 
    Value: !Ref SSHSecurityGroup 
    Export:
      Name: !Sub '${AWS::StackName}-SSHSecurityGroup'

  NATSecurityGroup: 
    Description: VPC Ingress Rules 
    Value: !Ref NATSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-NATSecurityGroup'

  InternalSecurityGroup: 
    Description: Internal SSH access
    Value: !Ref InternalSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-InternalSecurityGroup'